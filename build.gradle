plugins {
	id 'com.github.kt3k.coveralls' version '2.4.0'
	id 'maven-publish'
	// Add the JMH Gradle plugin
	id 'me.champeau.jmh' version '0.7.1'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'jacoco'

group = 'io.github.ensgijs'
archivesBaseName = 'ens-nbt'
version = '0.1-SNAPSHOT'
sourceCompatibility = JavaLanguageVersion.of(17)
targetCompatibility = JavaLanguageVersion.of(17)
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

repositories {
	mavenCentral()
}

publishing {
	repositories {
		maven {
			name = "GitHubPackages"
			url = "https://maven.pkg.github.com/octocat/hello-world"
			credentials {
				username = System.getenv("GITHUB_ACTOR")
				password = System.getenv("GITHUB_TOKEN")
			}
		}
	}
	publications {
		maven(MavenPublication) {
			groupId = System.getenv("group")
			artifactId = 'ens-nbt'
			version = System.getenv("version")

			from components.java
		}
	}
}

dependencies {
	testImplementation 'junit:junit:4.13.2'
	jmh 'org.openjdk.jmh:jmh-core:1.37'
	jmh 'org.openjdk.jmh:jmh-generator-annprocess:1.37'
}

// Configure the JMH plugin
jmh {
	// Use an existing test source set for JMH benchmarks, or let the plugin create one
	// jmh.includes is an array of regular expressions that should match against the
	// fully qualified names of classes that contain benchmarks.
	includes = [".*"]

	warmupIterations = 5
	iterations = 10
	fork = 1

	resultFormat = 'json'
	resultsFile = new File('build/reports/jmh/results.json')
}

javadoc {
	source = sourceSets.main.allJava
	destinationDir = file("./doc/")
	include 'io/github/ensgijs/nbt/**'
	options.windowTitle 'NBT (ENS)'
	options.encoding 'UTF-8'
	options.linkSource true
	options.links 'https://docs.oracle.com/javase/17/docs/api/'
}

task sourcesJar(type: Jar, dependsOn: classes) {
	archiveClassifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	archiveClassifier = 'javadoc'
	from javadoc.destinationDir
}

jacocoTestReport {
	reports {
		xml.required = true
		html.required = true
	}
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

java {
	withJavadocJar()
	withSourcesJar()
}

tasks.register('profilingRun', JavaExec) {
	mainClass = 'io.github.ensgijs.nbt.profiler.ProfilingRunner'
	classpath = sourceSets.main.runtimeClasspath
	classpath += sourceSets.test.runtimeClasspath
	classpath += sourceSets.jmh.runtimeClasspath

	doFirst {
		file('build/jfr-profiling').mkdirs()
	}

	def jfrSettingsFile = sourceSets.jmh.resources.find {it.name == 'profiler_settings.jfc'}
	if (!jfrSettingsFile) {
		throw new GradleException("JFR profiler_settings.jfc file not found in jmh/resources folder.")
	}

	// Add JVM arguments to enable JFR and save a recording
	jvmArgs += [
			"-XX:StartFlightRecording=duration=10s,filename=build/jfr-profiling/profiling-run.jfr,settings=${jfrSettingsFile.getAbsolutePath()}"
	]
}